# SPDX-License-Identifier: BSD-3-Clause
# Copyright (c) 2025, Iftach Naftaly <iftahnaf@gmail.com>

import os
from pathlib import Path

from utils import register_custom_msgs, get_px4_msgs
from datetime import datetime
from rosbags.rosbag2 import Reader
from rosbags.typesys.store import Typestore
import matplotlib.pyplot as plt
import logging
from matplotlib.backends.backend_pdf import PdfPages
import glob

# Set up logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


class MultiReport:
    def __init__(self, bags_folder: str, px4_msgs_path: str = None, commit_id: str = None, author: str = None):
        logger.info("Initializing MultiReport...")
        logger.info(f"Bags folder path: {bags_folder}")
        logger.info(f"PX4 messages path: {px4_msgs_path}")

        self.bags_folder = bags_folder
        self.commit_id = commit_id if commit_id else "N/A"
        self.author = author if author else "Unknown"

        px4_msgs = get_px4_msgs(px4_msgs_path)
        self.typestore: Typestore = register_custom_msgs(px4_msgs)

        results_dir = "./results"
        self.report_path = os.path.join(
            results_dir, f"{os.path.basename(bags_folder)}_multi_report.pdf"
        )

        self.required_topic = "/fmu/out/vehicle_local_position"
        self.bag_trajs = []  # List of (bag_name, x_list, y_list)
        self.read_all_bags()
        self.generate_report()
        logger.info(f"PDF report generated at: {self.report_path}")

    def generate_report(self):
        with PdfPages(self.report_path) as pdf:
            self.add_header_page(pdf)
            self.plot_all_trajectories(pdf)

    def add_header_page(self, pdf):
        plt.figure(figsize=(10, 6))
        plt.axis('off')
        plt.text(
            0.5, 0.8, "Multi-Bag Trajectory Report",
            ha='center', va='center',
            fontsize=24,
            fontweight='bold',
        )
        commit_short = self.commit_id[:8] if self.commit_id not in "N/A" else "N/A"
        metadata_text = (
            f"Bags folder: {os.path.basename(self.bags_folder)}\n"
            f"Generated on: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
            f"Commit: {commit_short}\n"
            f"Author: {self.author}\n\n"
        )
        plt.text(
            0.5, 0.4, metadata_text,
            ha='center', va='center',
            wrap=True,
            fontsize=12,
            family='monospace',
        )
        plt.text(
            0.5, 0.1, "Generated by px4_sitl_on_aws",
            ha='center', va='center',
            fontsize=10,
            family='monospace',
            color='gray',
        )
        pdf.savefig()
        plt.close()

    def plot_all_trajectories(self, pdf):
        plt.figure(figsize=(10, 8))
        for bag_name, xs, ys in self.bag_trajs:
            if xs and ys:
                plt.plot(xs, ys, label=bag_name)
        plt.xlabel("X Position [m]")
        plt.ylabel("Y Position [m]")
        plt.title("XY Trajectories from All Bags")
        plt.legend(fontsize=8)
        plt.grid()
        pdf.savefig()
        plt.close()

    def read_all_bags(self):
        bag_paths = sorted(glob.glob(os.path.join(self.bags_folder, "*")))
        for bag_path in bag_paths:
            if not os.path.isdir(bag_path):
                continue
            x_list, y_list = [], []
            try:
                with Reader(Path(bag_path)) as reader:
                    connections = [x for x in reader.connections if x.topic == self.required_topic]
                    for connection, timestamp, rawdata in reader.messages(connections=connections):
                        msg = self.typestore.deserialize_cdr(rawdata, connection.msgtype)
                        x_list.append(msg.x)
                        y_list.append(msg.y)
                self.bag_trajs.append((os.path.basename(bag_path), x_list, y_list))
            except Exception as e:
                logger.warning(f"Failed to read {bag_path}: {e}")

if __name__ == "__main__":
    import argparse
    parser = argparse.ArgumentParser(
        description="Generate a multi-bag XY trajectory report from a folder of ROS2 bags."
    )
    parser.add_argument("bags_folder", type=str, help="Path to the folder containing ROS2 bag directories.")
    parser.add_argument(
        "--px4_msgs_path",
        type=str,
        help="Path to the directory containing custom PX4 messages.",
        default="./src/px4_msgs/msg",
    )
    parser.add_argument(
        "--commit_id",
        type=str,
        help="Commit ID of the PX4 messages.",
        default=None,
    )
    parser.add_argument(
        "--author",
        type=str,
        help="Author of the PX4 messages.",
        default="Iftach Naftaly",
    )
    args = parser.parse_args()
    MultiReport(args.bags_folder, args.px4_msgs_path, args.commit_id, args.author)
